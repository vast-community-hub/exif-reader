Class {
	#name : 'SoSVisitorAbstractOutputClass',
	#superclass : 'SoSVisitorAbstractClass',
	#instVars : [
		'showOutput',
		'separator',
		'outputList',
		'bigEndian'
	],
	#pools : [
		'CldtConstants'
	],
	#classInstVars : [
		'bigEndian'
	],
	#category : 'SoSExifReaderApp'
}

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
SoSVisitorAbstractOutputClass class >> _PRAGMA_IS_ [

	"%%PRAGMA DECLARE
	(name: IS_SoSVisitorAbstractOutputClass isPool: true isConstant: false)
	(pool: IS_SoSVisitorAbstractOutputClass declarations: (
		(name: IS_instanceInterfaceSpec isConstant: false)
	))"


]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
SoSVisitorAbstractOutputClass class >> abtPrimFlushInterfaceSpecCache [

	IS_SoSVisitorAbstractOutputClass
		associationsDo: [:poolDictionaryAssoc | poolDictionaryAssoc value: nil].
	super abtPrimFlushInterfaceSpecCache
]

{ #category : 'IS_generated' }
SoSVisitorAbstractOutputClass class >> bigEndian [

	^bigEndian
]

{ #category : 'IS_generated' }
SoSVisitorAbstractOutputClass class >> bigEndian: anObject [

	bigEndian := anObject
]

{ #category : 'IS_generated',
  #vaVisibility : 'private' }
SoSVisitorAbstractOutputClass class >> IS_instanceInterfaceSpec [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^IS_SoSVisitorAbstractOutputClass::IS_instanceInterfaceSpec notNil ifTrue: [IS_SoSVisitorAbstractOutputClass::IS_instanceInterfaceSpec]
	ifFalse: [IS_SoSVisitorAbstractOutputClass::IS_instanceInterfaceSpec := AbtInterfaceSpec new]
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> apexApertureCalculation: aValue [

	| a |

	a := (2 sqrt raisedTo: aValue).
	a := a roundTo: 0.01.
	^a


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> apexBrightnessCalculation: aValue [

	| a |

	a := self calculateLog2: aValue.
	a := a roundTo: 0.0001.
	^a


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> apexShutterSpeedCalculation: aValue [

	| a |

	a := self calculateLog2: aValue.
	a := 1 / a.
	a := a roundTo: 0.0001.
	^a


]

{ #category : 'Accessors' }
SoSVisitorAbstractOutputClass >> bigEndian [
	"Return the value of bigEndian."

	^self class bigEndian
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> calculateLog2: aValue [

	^2 raisedTo: aValue


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> convertByteArrayToStrings: baArray bigEndian: anEndian [

	| ba result |

	ba := OrderedCollection new.
	result := OrderedCollection new.
	1 to: baArray size by: 4 do: [:i | ba add: ((baArray copyFrom: i to: (i + 3)) asInteger: true)].
	1 to: ba size by: 2 do: [:i | result add: (((ba at: i) / (ba at: (i + 1)))) asFloat].
	^result
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputATag: aTag ForValues: values andResults: results [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputList [

	"Return the value of outputList."

	outputList isNil ifTrue: [self outputList: OrderedCollection new].
	^outputList


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputList: anObject [

	"Save the value of outputList."

	outputList := anObject


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTag: aTag oneValueString: value [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTag: aTag oneValueString: value prefix: prefix [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTag: aTag oneValueString: value suffix: suffix [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTag: aTag oneValueString: value suffix: suffix using: aSymbol [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagAndOneValueString: aTag [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagAndValueString: aTag [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagAndValueString: aTag prefix: aPrefix [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagAndValueString: aTag suffix: aSuffix [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagAndValueString: aTag suffix: aSuffix using: aSymbol [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagAndValueString: aTag suffix: aSuffix using: aSymbol with: anArgument [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagAndValueStringAsFraction: aTag suffix: aSuffix [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagAndValueStringAsFraction: aTag suffixList: aSuffix [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> outputTagString: aTag separator: aString value: value [

	^self subclassResponsibility


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> resolveByteArrayFor: bytes output: textStrings [

	|  outputString result |


	outputString := WriteStream on: ''.
	result := self convertByteArrayToStrings: bytes bigEndian: self bigEndian.
	outputString
		nextPutAll: (textStrings at: 1);
		nextPutAll: (result at: 1) printString;
		nextPutAll: 'mm ';
		nextPutAll: (textStrings at: 2);
		nextPutAll: (result at: 2) printString;
		nextPutAll: 'mm ';
		nextPutAll: (textStrings at: 3);
		nextPut: $f;
		nextPutAll: (result at: 3) printString;
		nextPut: $ ;
		nextPutAll: (textStrings at: 4);
		nextPut: $f;
		nextPutAll: (result at: 4) printString
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> secondsSuffixFor: aValue [

	| suffix |

	aValue < 0
		ifTrue: [suffix := 'seconds']
		ifFalse: [aValue = 1 ifTrue: [suffix := 'second'] ifFalse: [suffix := 'th of a second']].
	^suffix


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> separator [

	"Return the value of separator."

	separator isNil ifTrue: [self separator: ' : '].
	^separator


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> separator: anObject [

	"Save the value of separator."

	separator := anObject


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> showOutput [
	"Return the value of showOutput."

	^showOutput
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> showOutput: anObject [
	"Save the value of showOutput."

	showOutput := anObject
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedExifReaderTag: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedExifTag: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSApertureValue: target with: anExtraObject [

	target value do: [:each |
		self
			outputTag: target
			oneValueString: (self apexApertureCalculation: each) exifPrintString
			prefix: 'f']


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSArtist: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSBitsPerSample: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSBodySerialNumber: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSBrightnessValue: target with: anExtraObject [

	| apexValue suffix |

	apexValue := self apexBrightnessCalculation: target value.
	suffix := 'foot lambert'.
	self outputTag: target oneValueString: apexValue exifPrintString suffix: suffix


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSCameraOwnerName: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSCFAPattern: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSColorSpace: target with: anExtraObject [

	self outputATag: target ForValues: #(1 65535) andResults: #('sRGB' 'Uncalibrated' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSComponentsConfiguration: target with: anExtraObject [

	self outputATag: target ForValues: #('1230' '4560') andResults: #('YCbCr' 'RGB' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSCompressedBitsPerPixel: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSCompression: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSContrast: target with: anExtraObject [

	self outputATag: target ForValues: #(0 1 2) andResults: #('Normal' 'Soft' 'Hard' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSCopyright: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSCustomRendered: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1)
		andResults: #('Normal Process' 'Custom Process' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSDateTime: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSDateTimeDigitized: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSDateTimeOriginal: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSDeviceSettingDescription: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSDigitalZoomRatio: target with: anExtraObject [

	| bytes outputString textStrings result |

	textStrings := #('').
	bytes := target value.
	outputString := WriteStream on: ''.
	result := self convertByteArrayToStrings: bytes bigEndian: self bigEndian.
	outputString
		nextPutAll: (textStrings at: 1);
		nextPutAll: (result at: 1) printString.
	self outputTag: target oneValueString: outputString contents


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSExifIFDPointer: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSExifVersion: target with: anExtraObject [

	| versionString vArray |

	vArray := target value first printString asArray.
	vArray := vArray copyFrom: 2 to: (vArray size - 1).
	versionString := WriteStream on: ''.
	versionString
		nextPut: (vArray at: 2);
		nextPut: $.;
		nextPut: (vArray at: 3);
		nextPut: $.;
		nextPut: (vArray at: 4).

	self outputTag: target oneValueString: versionString contents suffix: ''
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSExposureBiasValue: target with: anExtraObject [

	| apexValue prefix |

	target value = (0 / 3) ifTrue: [apexValue := 0] ifFalse: [apexValue := target value].
	prefix := 'EV '.
	self outputTag: target oneValueString: apexValue exifPrintString prefix: prefix


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSExposureIndex: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSExposureMode: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2)
		andResults: #('Auto exposure' 'Manual exposure' 'Auto bracket' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSExposureProgram: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2 3 4 5 6 7 8)
		andResults: #(
			'Not defined' 'Manual' 'Normal program' 'Aperture priority' 'Shutter priority'
			'Creative program' 'Action program' 'Portrait mode' ' Landscape mode' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSExposureTime: target with: anExtraObject [

	| suffixList v |

	suffixList := OrderedCollection new.
	v := target value first.
	target value do: [:each | suffixList add: (self secondsSuffixFor: each)].
	v := 1 / v.
	target value: (OrderedCollection with: v).
	self outputTagAndValueString: target suffix: suffixList first


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFileSource: target with: anExtraObject [

	self outputATag: target ForValues: #(3) andResults: #('DSC' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFlash: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 5 9 13 15 16 24 25 29 31 32 65 69 71 73 77 79 89 93 95)
		andResults: #(
			'Flash did not fire.' 'Flash fired.' 'Strobe return light not detected.'
			'Flash fired  compulsory flash mode'
			'Flash fired  compulsory flash mode  return light not detected'
			'Flash fired  compulsory flash mode  return light detected'
			'Flash did not fire  compulsory flash mode' 'Flash fired  auto mode'
			'Flash fired  auto mode  return light not detected'
			'Flash fired  auto mode  return light detected' 'No flash function'
			'Flash fired  red-eye reduction mode'
			'Flash fired  red-eye reduction mode  return light not detected'
			'Flash fired  red-eye reduction mode  return light detected'
			'Flash fired  compulsory flash mode  red-eye reduction mode'
			'Flash fired  compulsory flash mode  red-eye reduction mode  return light not detected'
			'Flash fired  compulsory flash mode  red-eye reduction mode  return light detected'
			'Flash fired  auto mode  red-eye reduction mode'
			'Flash fired  auto mode  return light not detected  red-eye reduction mode'
			'Flash fired  auto mode  return light detected  red-eye reduction mode' 'reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFlashEnergy: target with: anExtraObject [

	self outputTagAndValueString: target suffix: ' Beam Candle Power seconds (BCPS)'


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFlashpixVersion: target with: anExtraObject [

	| s |

	s := target value first asNumber.
	s := s / 100.
	target value: (OrderedCollection with: s printString).
	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFNumber: target with: anExtraObject [

	| bytes outputString  textStrings result |

	textStrings := #('f').
	bytes := target value.
	outputString := WriteStream on: ''.
	result := self convertByteArrayToStrings: bytes bigEndian: self bigEndian.
	outputString
		nextPutAll: (textStrings at: 1);
		nextPutAll: (result at: 1) printString.
	self outputTag: target oneValueString: outputString contents
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFocalLength: target with: anExtraObject [

	| bytes outputString  result |

	bytes := target value.
	outputString := WriteStream on: ''.
	result := self convertByteArrayToStrings: bytes bigEndian: self bigEndian.
	outputString
		nextPutAll: (result at: 1) printString;
		nextPutAll: 'mm '.
	self outputTag: target oneValueString: outputString contents
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFocalLengthIn35mmFilm: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFocalPlaneResolutionUnit: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFocalPlaneXResolution: target with: anExtraObject [

	self
		outputTagAndValueString: target
		suffix: ' pixels per Focal Plane resolution Unit'
		using: #roundTo:
		with: 0.1


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSFocalPlaneYResolution: target with: anExtraObject [

	self
		outputTagAndValueString: target
		suffix: ' pixels per Focal Plane resolution Unit'
		using: #roundTo:
		with: 0.1


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSGainControl: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2 3 4)
		andResults: #(
			'None' 'Low gain up' High gain up ' Low gain down' 'High gain down' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSImageDescription: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSImageDescriptionSoSMake: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSImageLength: target with: anExtraObject [

	target value do: [:each |
		self
			outputTag: target
			oneValueString: (each printString , ' pixels') exifPrintString
			prefix: '']


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSImageUniqueID: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSImageWidth: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSInteroperabilityIFDPointer: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSISOSpeedRatings: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSJPEGInterchangeFormat: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSJPEGInterchangeFormatLength: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSLensMake: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSLensModel: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSLensSerialNumber: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSLensSpecification: target with: anExtraObject [

	| bytes outputString  textStrings result |

	textStrings := #('Minimum: ' 'Maximum: ' 'Min f: ' 'Max f: ').
	bytes := target value.
	outputString := WriteStream on: ''.
	result := self convertByteArrayToStrings: bytes bigEndian: self bigEndian.
	outputString
		nextPutAll: (textStrings at: 1);
		nextPutAll: (result at: 1) printString;
		nextPutAll: 'mm ';
		nextPutAll: (textStrings at: 2);
		nextPutAll: (result at: 2) printString;
		nextPutAll: 'mm ';
		nextPutAll: (textStrings at: 3);
		nextPut: $f;
		nextPutAll: (result at: 3) printString;
		nextPut: $ ;
		nextPutAll: (textStrings at: 4);
		nextPut: $f;
		nextPutAll: (result at: 4) printString.
	self outputTag: target oneValueString: outputString contents
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSLightSource: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2 3 4 9 10 11 12 13 14 15 17 18 19 20 21 22 23 24 255)
		andResults: #(
			'Daylight' 'Flourescent' 'Tungsten (incandescent light)' 'Flash' 'Fine weather'
			'Cloudy weather' 'Shade' 'Daylight fluorescent (D 5700 - 7100K)'
			'Day white fluorescent (N 4600 - 5400K)' 'Cool white fluorescent (W 3900 - 4500K)'
			'White fluorescent (WW 3200 - 3700K)' 'Standard light A' 'Standard light B'
			'Standard light C' 'D55' 'D65' 'D75' 'D50' 'ISO studio tungsten' 'Other light source'
			'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSMake: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSMakerNote: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSMaxApertureValue: target with: anExtraObject [

	target value do: [:each |
		self
			outputTag: target
			oneValueString: (self apexApertureCalculation: each) exifPrintString
			prefix: 'f']


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSMeteringMode: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2 3 4 5 6 7 8 255)
		andResults: #(
			'Unknown' 'Average' 'Center Weighted Average' 'Spot' 'Multi-spot' 'Pattern' 'Partial'
			'Other' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSModel: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSOECF: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSOrientation: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSPhotometricInterpretation: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSPixelXDimension: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSPixelYDimension: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSPlanarConfiguration: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(1 2)
		andResults: #('Chunky format' 'Planar format' 'Reserved format')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSPrimaryChromaticities: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSPrimaryChroSoSSpectralSensitivitymaticities: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSReferenceBlackWhite: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSRelatedSoundFile: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSResolutionUnit: target with: anExtraObject [

	self outputATag: target ForValues: #(1 2) andResults: #('Inches' 'Centimeters' 'Reserved ')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSRowsPerStrip: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSamplesPerPixel: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSaturation: target with: anExtraObject [


	self
		outputATag: target
		ForValues: #(0 1 2)
		andResults: #('Normal' 'Low saturation' 'High saturation' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSceneCaptureType: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2 3)
		andResults: #('Standard' 'Landscape' 'Portrait' 'Night scene' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSceneType: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSensingMethod: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(1 2 3 4 5 7 8)
		andResults: #(
			'Not defined' 'One-chip color area sensor' 'Two-chip color area sensor'
			'Three-chip color area sensor' 'Color sequential area sensor' 'Trilinear sensor'
			'Color sequential linear sensor' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSensitivityType: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2 3 4 5 6 7 'Other')
		andResults: #(
			'Unknown' 'Standard output sensitivity (SOS)' 'Recommended exposure index (REI)'
			'ISO speed' 'Standard output sensitivity (SOS) and recommended exposure index (REI)'
			'Standard output sensitivity (SOS) and ISO speed'
			'Recommended exposure index (REI) and ISO speed'
			'Standard output sensitivity (SOS) and recommended exposure index (REI) and ISO speed'
			'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSharpness: target with: anExtraObject [

	self outputATag: target ForValues: #(0 1 2) andResults: #('Normal' 'Soft' 'Hard' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSShutterSpeedValue: target with: anExtraObject [

	| apexValue suffix |

	apexValue := self apexShutterSpeedCalculation: target value.
	suffix := self secondsSuffixFor: apexValue.
	self outputTag: target oneValueString: apexValue exifPrintString suffix: suffix


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSoftware: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSpatialFrequencyResponse: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSpectralSensitivity: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSStripByteCounts: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSStripOffsets: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSubjectArea: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSubjectDistance: target with: anExtraObject [

	| distance |

	target value = 4294967295
		ifTrue: [distance := 'Infinity']
		ifFalse: [
			target value = 0
				ifTrue: [distance := 'Unknown']
				ifFalse: [distance := target value exifPrintString , ' m']].
	self outputTagAndValueString: distance


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSubjectDistanceRange: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2 3)
		andResults: #('Unknown' 'Macro' 'Close view' 'Distant view' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSubjectLocation: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSubSecTime: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSubSecTimeDigitized: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSSubSecTimeOriginal: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSTransferFunction: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSUserComment: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSWhiteBalance: target with: anExtraObject [

	self
		outputATag: target
		ForValues: #(0 1 2)
		andResults: #('Normal' 'Auto white balance' 'Manual white balance' 'Reserved')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSWhitePoint: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSXResolution: target with: anExtraObject [


	| textStrings bytes outputString result |

	textStrings := #(' pixels').
	bytes := target value.
	result := self convertByteArrayToStrings: bytes bigEndian: self bigEndian.
	outputString := WriteStream on: ''.
	outputString
		nextPutAll: (result at: 1) printString;
		nextPutAll: (textStrings at: 1).
	self outputTag: target oneValueString: outputString contents
]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSYCbCrCoefficients: target with: anExtraObject [

	self outputTagAndValueString: target


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSYCbCrPositioning: target with: anExtraObject [

	self outputATag: target ForValues: #(1 2) andResults: #('Centered' 'Co-sited' 'Reserved ')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSYCbCrSubSampling: target with: anExtraObject [

	self outputATag: target ForValues: #(1 2) andResults: #('YCbCr4:2:2' 'YCbCr4:2:0' 'Reserved ')


]

{ #category : 'Not categorized' }
SoSVisitorAbstractOutputClass >> visitedSoSYResolution: target with: anExtraObject [

	| textStrings bytes outputString result |

	textStrings := #(' pixels').
	bytes := target value.
	result := self convertByteArrayToStrings: bytes bigEndian: self bigEndian.
	outputString := WriteStream on: ''.
	outputString
		nextPutAll: (result at: 1) printString;
		nextPutAll: (textStrings at: 1).
	self outputTag: target oneValueString: outputString contents
]
